// Code generated by mockery v1.0.0. DO NOT EDIT.

// NOTE: run 'make update-mocks' from this project top folder to update this file and generate new ones.

package connectors

import mock "github.com/stretchr/testify/mock"

// MockHighLevelClient is an autogenerated mock type for the HighLevelClient type
type MockHighLevelClient struct {
	mock.Mock
}

// CreateConnector provides a mock function with given fields: req, sync
func (_m *MockHighLevelClient) CreateConnector(req CreateConnectorRequest, sync bool) (ConnectorResponse, error) {
	ret := _m.Called(req, sync)

	var r0 ConnectorResponse
	if rf, ok := ret.Get(0).(func(CreateConnectorRequest, bool) ConnectorResponse); ok {
		r0 = rf(req, sync)
	} else {
		r0 = ret.Get(0).(ConnectorResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(CreateConnectorRequest, bool) error); ok {
		r1 = rf(req, sync)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConnector provides a mock function with given fields: req, sync
func (_m *MockHighLevelClient) DeleteConnector(req ConnectorRequest, sync bool) (EmptyResponse, error) {
	ret := _m.Called(req, sync)

	var r0 EmptyResponse
	if rf, ok := ret.Get(0).(func(ConnectorRequest, bool) EmptyResponse); ok {
		r0 = rf(req, sync)
	} else {
		r0 = ret.Get(0).(EmptyResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ConnectorRequest, bool) error); ok {
		r1 = rf(req, sync)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeployConnector provides a mock function with given fields: req
func (_m *MockHighLevelClient) DeployConnector(req CreateConnectorRequest) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(CreateConnectorRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeployMultipleConnector provides a mock function with given fields: connectors
func (_m *MockHighLevelClient) DeployMultipleConnector(connectors []CreateConnectorRequest) error {
	ret := _m.Called(connectors)

	var r0 error
	if rf, ok := ret.Get(0).(func([]CreateConnectorRequest) error); ok {
		r0 = rf(connectors)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *MockHighLevelClient) GetAll() (GetAllConnectorsResponse, error) {
	ret := _m.Called()

	var r0 GetAllConnectorsResponse
	if rf, ok := ret.Get(0).(func() GetAllConnectorsResponse); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(GetAllConnectorsResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTasks provides a mock function with given fields: req
func (_m *MockHighLevelClient) GetAllTasks(req ConnectorRequest) (GetAllTasksResponse, error) {
	ret := _m.Called(req)

	var r0 GetAllTasksResponse
	if rf, ok := ret.Get(0).(func(ConnectorRequest) GetAllTasksResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(GetAllTasksResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ConnectorRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnector provides a mock function with given fields: req
func (_m *MockHighLevelClient) GetConnector(req ConnectorRequest) (ConnectorResponse, error) {
	ret := _m.Called(req)

	var r0 ConnectorResponse
	if rf, ok := ret.Get(0).(func(ConnectorRequest) ConnectorResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(ConnectorResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ConnectorRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectorConfig provides a mock function with given fields: req
func (_m *MockHighLevelClient) GetConnectorConfig(req ConnectorRequest) (GetConnectorConfigResponse, error) {
	ret := _m.Called(req)

	var r0 GetConnectorConfigResponse
	if rf, ok := ret.Get(0).(func(ConnectorRequest) GetConnectorConfigResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(GetConnectorConfigResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ConnectorRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectorStatus provides a mock function with given fields: req
func (_m *MockHighLevelClient) GetConnectorStatus(req ConnectorRequest) (GetConnectorStatusResponse, error) {
	ret := _m.Called(req)

	var r0 GetConnectorStatusResponse
	if rf, ok := ret.Get(0).(func(ConnectorRequest) GetConnectorStatusResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(GetConnectorStatusResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ConnectorRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskStatus provides a mock function with given fields: req
func (_m *MockHighLevelClient) GetTaskStatus(req TaskRequest) (TaskStatusResponse, error) {
	ret := _m.Called(req)

	var r0 TaskStatusResponse
	if rf, ok := ret.Get(0).(func(TaskRequest) TaskStatusResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(TaskStatusResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(TaskRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsUpToDate provides a mock function with given fields: connector, config
func (_m *MockHighLevelClient) IsUpToDate(connector string, config map[string]interface{}) (bool, error) {
	ret := _m.Called(connector, config)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) bool); ok {
		r0 = rf(connector, config)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, map[string]interface{}) error); ok {
		r1 = rf(connector, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PauseConnector provides a mock function with given fields: req, sync
func (_m *MockHighLevelClient) PauseConnector(req ConnectorRequest, sync bool) (EmptyResponse, error) {
	ret := _m.Called(req, sync)

	var r0 EmptyResponse
	if rf, ok := ret.Get(0).(func(ConnectorRequest, bool) EmptyResponse); ok {
		r0 = rf(req, sync)
	} else {
		r0 = ret.Get(0).(EmptyResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ConnectorRequest, bool) error); ok {
		r1 = rf(req, sync)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestartConnector provides a mock function with given fields: req
func (_m *MockHighLevelClient) RestartConnector(req ConnectorRequest) (EmptyResponse, error) {
	ret := _m.Called(req)

	var r0 EmptyResponse
	if rf, ok := ret.Get(0).(func(ConnectorRequest) EmptyResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(EmptyResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ConnectorRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestartTask provides a mock function with given fields: req
func (_m *MockHighLevelClient) RestartTask(req TaskRequest) (EmptyResponse, error) {
	ret := _m.Called(req)

	var r0 EmptyResponse
	if rf, ok := ret.Get(0).(func(TaskRequest) EmptyResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(EmptyResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(TaskRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResumeConnector provides a mock function with given fields: req, sync
func (_m *MockHighLevelClient) ResumeConnector(req ConnectorRequest, sync bool) (EmptyResponse, error) {
	ret := _m.Called(req, sync)

	var r0 EmptyResponse
	if rf, ok := ret.Get(0).(func(ConnectorRequest, bool) EmptyResponse); ok {
		r0 = rf(req, sync)
	} else {
		r0 = ret.Get(0).(EmptyResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ConnectorRequest, bool) error); ok {
		r1 = rf(req, sync)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDebug provides a mock function with given fields:
func (_m *MockHighLevelClient) SetDebug() {
	_m.Called()
}

// SetInsecureSSL provides a mock function with given fields:
func (_m *MockHighLevelClient) SetInsecureSSL() {
	_m.Called()
}

// UpdateConnector provides a mock function with given fields: req, sync
func (_m *MockHighLevelClient) UpdateConnector(req CreateConnectorRequest, sync bool) (ConnectorResponse, error) {
	ret := _m.Called(req, sync)

	var r0 ConnectorResponse
	if rf, ok := ret.Get(0).(func(CreateConnectorRequest, bool) ConnectorResponse); ok {
		r0 = rf(req, sync)
	} else {
		r0 = ret.Get(0).(ConnectorResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(CreateConnectorRequest, bool) error); ok {
		r1 = rf(req, sync)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
